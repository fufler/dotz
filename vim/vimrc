" ====================== GENERAL SETTINGS ======================
set nocompatible                                                 " be iMproved
set mouse=a                                                      " use mouse
set backup                                                       " store backups in separate folder
set backupdir=~/.vim/backup/
set directory=~/.vim/swap/                                       " store swap files in separate directory
set suffixes+=.png,.gif,.jpg,.jpeg,.ico,.gz,.tgz,.zip            " ignore binary files wheh completing
set wildignore+=*/build/*,*.so,*.swp,*.zip,*.o,*.pyc             " ignore binary files when expanding wildcards
set wildmode=list:full                                           " use regular shell-like autocompletion
set shortmess+=I                                                 " disable startup message
filetype plugin on                                               " load plugins basing on file type
set exrc                                                         " enable secure load of external vimrc config
set secure

" ========================== PLUGINS  ==========================
set rtp+=~/.vim/bundle/vundle/                                   " adjust runtime path
call vundle#rc()                                                 " initialize vundle

" Package manager
Bundle 'gmarik/vundle.git'
" Fancy status line
Bundle 'bling/vim-airline'
" Faster navigation
Bundle 'Lokaltog/vim-easymotion'
" Quickly open files and switch tabs
Bundle 'kien/ctrlp.vim'
" Quickly jump to functions
Bundle 'tacahiroy/ctrlp-funky'
" Easily switch between source and header files
Bundle 'a.vim'
" Directory structure browser
Bundle 'scrooloose/nerdtree'
" Easy commenting
Bundle 'scrooloose/nerdcommenter'
" Clang-enabed autocompletion
Bundle 'Valloric/YouCompleteMe'
" Latex utils
Bundle 'jcf/vim-latex'
" On-the-fly syntax checking
Bundle 'scrooloose/syntastic.git'
" Show git diff on the sign column
Bundle 'airblade/vim-gitgutter'
" Fresh color scheme
Bundle 'summerfruit256.vim'
" Git wrappings
Bundle 'tpope/vim-fugitive'
" XML tags autocompletion
Bundle 'sukima/xmledit'
" Automatically convert Java properties files to ASCII
Bundle 'fufler/vim-unicodeswitch'
" Syntax highlighting for Freemarker template files
Bundle 'chaquotay/ftl-vim-syntax'
" A handy plugin to manage sessions
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'
" Doxygen comments support
Bundle 'vim-scripts/DoxygenToolkit.vim'
" Generates skeleton for c++ implementation file
Bundle 'derekwyatt/vim-fswitch'
Bundle 'derekwyatt/vim-protodef'
" Snippets support
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
" Ag integration
Bundle "rking/ag.vim"
" Multi-cursor
Bundle "terryma/vim-multiple-cursors"
" Side panel with outline view
Bundle "majutsushi/tagbar"


" ========================== ENCODINGS =========================
set encoding=utf-8                                               " default encoding
set fileencodings=utf-8,windows-1251,iso-8859-15,koi8-r          " list of encodings to try when starting to edit a file


" ====================== EDITOR SETTINGS =======================
syntax enable                                                    " highlight syntax
set autoread                                                     " automatically reload modified files
set autoindent                                                   " inherit previous line indentation
set cindent                                                      " use c-style indentation
set showmatch                                                    " show matchings
set matchpairs+=<:>                                              " show matching pairs for XML tags
set nowrap                                                       " do not wrap lines
set tabstop=4                                                    " use 4 spaces per tab for auto and manual indentation
set shiftwidth=0
set shiftround
set expandtab
set foldmethod=indent                                            " use indentation based folding
set foldlevelstart=99                                            " do not fold by default
set hidden                                                       " do not unload buffer on hide


" ========================= APPEARANCE =========================
set t_Co=256                                                     " use 256 colors
colorscheme summerfruit256                                       " use custom colorscheme
set background=light
hi! link SignColumn LineNr
hi! link GitGutterAdd LineNr
hi! link GitGutterChange LineNr
hi! link GitGutterDelete LineNr
hi! Pmenu ctermbg=194 ctermfg=black guibg=#d7ffd7 guifg=black
set colorcolumn=120                                              " colored margin
set number                                                       " show line numbers with 3 characters width
set numberwidth=3
set showtabline=0                                                " do not show opened tabs
set laststatus=2                                                 " show status line
set noshowmode                                                   " disable default mode indication
set guifont=AnonymousPro\ 14



" ======================== KEY BINDINGS ========================
set langmap=ЬM,Б<,Ю>,Ё~,
set langmap+=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,    " fix to use russian symbols
set langmap+=рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,      " in non-insert modes
set langmap+=ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,
set langmap+=ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",ЯZ,ЧX,СC,МV,ИB,ТN
set pastetoggle=<C-P><C-P>                                       " hot key to toggle paste mode
nmap <C-P><C-P> :CtrlPBuffer<CR>
nmap <C-G><C-G> :CtrlPFunky<CR>
nmap <C-T><C-T> :NERDTreeToggle<CR>
nmap <C-Y><C-Y> :TagbarToggle<CR>
nmap <Leader>jd :YcmCompleter GoTo<CR>
nmap <C-D><C-D> :Dox<CR>
imap <C-D><C-D> <Esc>:Dox<CR>
vmap <C-r> "hy:%s/<C-r>h//g<left><left><left>
nmap <C-B> :call setqflist([])<CR>:make<CR>
nmap <F2> :w<CR>
nmap <F6> :cnext<CR>
nmap <F7> :cprevious<CR>



" =========================== SEARCH ===========================
set incsearch                                                    " use incremental search
set hlsearch                                                     " highlight search results
set ignorecase                                                   " ignore case while searching if string is lowercase
set smartcase

" ======================== SPELL CHECKER =======================
setlocal spell spelllang=ru_ru,en_us                             " use spellchecker for russian and english, but disable by default
set nospell


" =============== HELPER FUNCTIONS AND COMMANDS ================
function ModeChange()                                            " if first line of a file seems to be an interpreter name
  if getline(1) =~ "^#!.*/bin/"                                  " then set  +x flag on the file
    silent !chmod a+x <afile>
  endif
endfunction

function JumpToDefinitionElseDeclaration()                       " simple wrapper for Ycm function that prevents
    if getbufvar(bufname(winbufnr(0)), '&modified')              " displaying of error message due to unsaved buffer
        echoerr "Please, save changes before jumping."
    else
        YcmCompleter GoToeclarationElse
    endif
endfunction

function RemoveTrailingWhitespace()                              " removes trailing whitespaces
    %s/[ \t]*$//g
endfunction

function CompileAndRun()                                         " compiles current file and executes it
    w! /tmp/code_to_run.cpp
    !g++ /tmp/code_to_run.cpp -std=c++11 -Wall -o /tmp/a.out && /tmp/a.out
endfunction

function! s:insert_gates()                                       " inserts header file gate
    let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
    execute "normal! i#ifndef " . gatename
    execute "normal! o#define " . gatename . " "
    execute "normal! Go#endif /* " . gatename . " */"
    normal! kk
endfunction

command RemoveTWS :call RemoveTrailingWhitespace()
command CompileAndRun :call CompileAndRun()
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!

autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
autocmd BufNewFile,BufRead wscript set syntax=python

" ====================== EVENT CALLBACKS =======================
au BufWritePost * call ModeChange()                              " adjust flags for script files on save


" ===================== YCM CONFIGURATION  =====================
let g:ycm_confirm_extra_conf = 0                                 " do not confirm extra config loading
let g:ycm_key_list_select_completion = []



" =================== AIRLINE CONFIGURATION  ===================
function! s:GenColors(s1, s2)
  return {
      \ 'airline_a'              : [ a:s1[0] , a:s1[1] , a:s1[2] , a:s1[3] , get(a:s1 , 4 , 'bold') ],
      \ 'airline_b'              : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_c'              : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_file'           : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_x'              : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_y'              : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_z'              : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ],
      \ 'airline_warning'        : [ a:s2[0] , a:s2[1] , a:s2[2] , a:s2[3] , get(a:s2 , 4 , ''    ) ]
      \ }
endfunction


let s:S1N = ['', '', 16, 255, 'bold']
let s:S1I = ['', '', 16, 12,  'bold']
let s:S1R = ['', '', 16, 9,   '']
let s:S1V = ['', '', 16, 11,  '']
let s:S2  = ['', '', 16, 255, '']

let g:airline#themes#summerfruit#palette = {
  \ 'normal'           : s:GenColors(s:S1N, s:S2),
  \ 'insert'           : s:GenColors(s:S1I, s:S2),
  \ 'visual'           : s:GenColors(s:S1V, s:S2),
  \ 'replace'          : s:GenColors(s:S1R, s:S2),
  \ 'inactive'         : s:GenColors(s:S1R, s:S2),
  \ 'normal_modified'  : s:GenColors(s:S1N, s:S2),
  \ 'insert_modified'  : s:GenColors(s:S1I, s:S2),
  \ 'visual_modified'  : s:GenColors(s:S1V, s:S2),
  \ 'replace_modified' : s:GenColors(s:S1R, s:S2),
  \ 'inactive_modified': s:GenColors(s:S1R, s:S2)
  \ }

let g:airline#themes#summerfruit#palette.normal_modified.airline_c   = [ '', '', 34, '', '' ]
let g:airline#themes#summerfruit#palette.insert_modified.airline_c   = [ '', '', 34, '', '' ]
let g:airline#themes#summerfruit#palette.visual_modified.airline_c   = [ '', '', 34, '', '' ]
let g:airline#themes#summerfruit#palette.replace_modified.airline_c  = [ '', '', 34, '', '' ]
let g:airline#themes#summerfruit#palette.inactive_modified.airline_c = [ '', '', 34, '', '' ]



let g:airline_theme='summerfruit'                                " airline colorscheme
let g:airline#extensions#syntastic#enabled = 1                   " enable syntastic integration for airline
let g:airline#extensions#tabline#enabled = 1                     " enable wrapped tabline
let g:airline_symbols = {}                                       " disable status line symbols

" ================== SYNTASTIC CONFIGURATION  ==================
let g:syntastic_enable_signs=0
let g:syntastic_enable_highlighting = 1

" ================ UNICODESWITCH CONFIGURATION  ================
let g:ucs_encode_java = 1

" =============== DOXYGEN TOOLKIT CONFIGURATION ================
let g:DoxygenToolkit_briefTag_pre = ''                           " don't use @brief tag

" =================== XML EDIT CONFIGURATION ===================
let g:xmledit_enable_html=1                                      " enable xml tag completions for htmls

" ===================== MAKE CONFIGURATION =====================
if filereadable('/proc/cpuinfo')                                " adjust number of parallel build jobs
    let s:njobs = system('grep -c ^processor /proc/cpuinfo')+1
    let &makeprg = 'make -j'.s:njobs
endif

" =================== NERDTREE CONFIGURATION  ==================
let NERDTreeIgnore = ['\.pyc$']                                 " Ignore compiled python files

" ================== CTRLP/FUNKY CONFIGURATION  ================
let g:ctrlp_extensions = ['funky']                              " Enable funky extension
let g:ctrlp_funky_syntax_highlight = 1                          " Enable syntax highlight
